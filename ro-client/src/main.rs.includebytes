use bevy::prelude::*;
use bevy_ecs_tilemap::prelude::*;

mod helpers;
use helpers::tiled::TiledLoader;
use helpers::tiled::TiledMapHandle;
use helpers::tiled::TiledMapBundle;
use helpers::tiled::TiledMap;

fn startup(mut commands: Commands, asset_server: Res<AssetServer>, mut tiled_maps: ResMut<Assets<TiledMap>>) {
    commands.spawn(Camera2d);

    // Load the TMX map at compile time using include_bytes!
    let map_bytes = include_bytes!("../assets/finite_embedded.tmx");

    // Use the new method to load the TiledMap from bytes
    let tiled_map = TiledLoader::load_from_bytes(map_bytes)
        .expect("Failed to load embedded TMX map");

    // Add the TiledMap as an asset to Bevy's asset storage
    let map_handle = tiled_maps.add(tiled_map);

    // Spawn the TiledMapBundle using the TiledMapHandle
    commands.spawn(TiledMapBundle {
        tiled_map: TiledMapHandle(map_handle),
        ..Default::default()
    });
}

fn main() {
    App::new()
        .add_plugins(
            DefaultPlugins
                .set(WindowPlugin {
                    primary_window: Some(Window {
                        title: String::from("Tiled Map Editor Example"),
                        ..Default::default()
                    }),
                    ..default()
                })
                .set(ImagePlugin::default_nearest()),
        )
        .add_plugins(TilemapPlugin)
        .add_plugins(helpers::tiled::TiledMapPlugin)
        .add_systems(Startup, startup)
        .add_systems(Update, helpers::camera::movement)
        .run();
}